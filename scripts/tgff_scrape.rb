# scrape.rb
# Author: Frank Lockom

# handles file IO associated with tgff

#TODO: add support for multiple task graphs in one file




# reads in a tgff file generated by the 
# tgff configuration file currently named "t1.tgffopt"
# which generates a task graph and two tables
#
# the first table called "EXEC" associates with each node(task) type
# an exec_time which is the number of cycles in nirgam
# that the task takes to complete.
#
# the second table called "VOLUME" associates with each edge the data
# volume which is transfered on the edge once the task completes execution.
#
# infile is the path of the .tgff file to read
# returns a task graph in the format described in scrape.rb:read_TG
def read_tgff(infile)
  result  = [Array.new,Array.new]
  task_type = Hash.new
  edge_index = Hash.new
  edge_type = Hash.new
  exec = Hash.new
  vol  = Hash.new
  s = 0
  graph = File.open(infile,'r').each do |line|
    case s
      when 0
        s = 1 if /@TASK_GRAPH \s+ 0 \s+ {/x.match line
        s = 2 if /@EXEC \s+ 0 \s+ {/x.match line
        s = 3 if /@VOLUME \s+ 0 \s+ {/x.match line
      when 1 # in TASK_GRAPH
        s = 0 if /}/.match line
      
        # add task
        if (m = /TASK \s+ t0_(\d+) \s+ TYPE \s+ (\d+)/x.match line)
          result[0].push [m[1].to_i,-1] # add the task, don't have the execution time yet(-1)
          task_type[m[1].to_i] = m[2].to_i  # map task to task type
        end

        # add edge
        if (m = /ARC \s+ a0_(\d+) \s+ FROM  \s+ t0_(\d+) \s+ TO \s+ t0_(\d+) \s+ TYPE \s+ (\d+)/x.match line)
          result[1].push [m[2].to_i,m[3].to_i,-1] # dont have volume yet(-1)
          edge_index[[m[2].to_i,m[3].to_i]] = m[1].to_i # map edge [src,dst] to edge index
          edge_type[m[1].to_i] = m[4].to_i  # map edge index to edge type
        end

      when 2 # in EXEC
        s = 0 if /}/.match line
        if (m = /(\d+) \s+ (\d+) \s+ (\d+)/x.match line)
          exec[m[1].to_i] = m[3].to_i # map task type to execution time
        end

      when 3 # in VOLUME
        s = 0 if /}/.match line
        if (m = /(\d+) \s+ (\d+)/x.match line)
          vol[m[1].to_i] = m[2].to_i # map edge type to volume
        end
    end
  end  
  
  # now fill in the execution times and volumes
  result[0].each do |t|
    t[1] = exec[task_type[t[0]]]
  end
  result[1].each do |e|
    e[2] = vol[edge_type[edge_index[[e[0],e[1]]]]]
  end

  result

end
